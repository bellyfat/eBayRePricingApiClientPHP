<?php
/**
 * BulkEditDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\EBay\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu ebay RePricing API
 *
 * eSagu API to reprice items on ebay.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\EBay\RePricing\V1\eSagu\EBay\RePricing\V1\Model;

use \ArrayAccess;

/**
 * BulkEditDTO Class Doc Comment
 *
 * @category    Class
 * @description A bulk edit operation. Each bulk edit has got a refinement part and a tasks part. The refinement defines which items should be edited. The tasks defines how the items should be edited.
 * @package     eSagu\EBay\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BulkEditDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BulkEditDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'failure_items' => 'int',
        'processed' => 'bool',
        'refinement' => '\eSagu\EBay\RePricing\V1\eSagu\EBay\RePricing\V1\Model\BulkEditRefinement',
        'tasks' => '\eSagu\EBay\RePricing\V1\eSagu\EBay\RePricing\V1\Model\BulkEditTasks',
        'total_items' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'failure_items' => 'failureItems',
        'processed' => 'processed',
        'refinement' => 'refinement',
        'tasks' => 'tasks',
        'total_items' => 'totalItems'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'failure_items' => 'setFailureItems',
        'processed' => 'setProcessed',
        'refinement' => 'setRefinement',
        'tasks' => 'setTasks',
        'total_items' => 'setTotalItems'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'failure_items' => 'getFailureItems',
        'processed' => 'getProcessed',
        'refinement' => 'getRefinement',
        'tasks' => 'getTasks',
        'total_items' => 'getTotalItems'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['failure_items'] = isset($data['failure_items']) ? $data['failure_items'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
        $this->container['refinement'] = isset($data['refinement']) ? $data['refinement'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
        $this->container['total_items'] = isset($data['total_items']) ? $data['total_items'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets failure_items
     * @return int
     */
    public function getFailureItems()
    {
        return $this->container['failure_items'];
    }

    /**
     * Sets failure_items
     * @param int $failure_items
     * @return $this
     */
    public function setFailureItems($failure_items)
    {
        $this->container['failure_items'] = $failure_items;

        return $this;
    }

    /**
     * Gets processed
     * @return bool
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     * @param bool $processed
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }

    /**
     * Gets refinement
     * @return \eSagu\EBay\RePricing\V1\eSagu\EBay\RePricing\V1\Model\BulkEditRefinement
     */
    public function getRefinement()
    {
        return $this->container['refinement'];
    }

    /**
     * Sets refinement
     * @param \eSagu\EBay\RePricing\V1\eSagu\EBay\RePricing\V1\Model\BulkEditRefinement $refinement
     * @return $this
     */
    public function setRefinement($refinement)
    {
        $this->container['refinement'] = $refinement;

        return $this;
    }

    /**
     * Gets tasks
     * @return \eSagu\EBay\RePricing\V1\eSagu\EBay\RePricing\V1\Model\BulkEditTasks
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     * @param \eSagu\EBay\RePricing\V1\eSagu\EBay\RePricing\V1\Model\BulkEditTasks $tasks
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets total_items
     * @return int
     */
    public function getTotalItems()
    {
        return $this->container['total_items'];
    }

    /**
     * Sets total_items
     * @param int $total_items
     * @return $this
     */
    public function setTotalItems($total_items)
    {
        $this->container['total_items'] = $total_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


